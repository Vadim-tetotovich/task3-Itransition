'use strict';
const path = require('path');
const webpack = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const baseConfig = {
    entry: {
        'index': './src/demo/main.js'
    },
    output: {
        filename: '[name].js',
        chunkFilename: '[name].min.js',
        publicPath: '/',
        path: path.join(__dirname, './src/demo/build')
    },
    resolve: {
        extensions: ['.js', '.vue'],
        alias: {
            vue: 'vue/dist/vue.js'
        }
    },
    devtool: '#inline-source-map',
    module: {
        rules: [
            {
                test: /\.vue$/,
                loader: 'vue-loader',
                options: {
                    loaders: {
                        css: ExtractTextPlugin.extract({
                            use: 'css-loader',
                            fallback: 'vue-style-loader' // <- this is a dep of vue-loader, so no need to explicitly install if using npm3
                        })
                    }
                }
            },
            {
                test: /\.js$/,
                use: [{
                    loader: 'babel-loader'
                }],
                include: [path.resolve(__dirname, './src/')]
            },
            {
                test: /\.css$/,
                loader: ExtractTextPlugin.extract('css-loader')
            },
            {
                test: /\.scss$/,
                loader: ExtractTextPlugin.extract('css-loader!sass-loader')
            },
            {
                test: /\.json$/,
                use: ['json-loader']
            },
            {
                test: /\.(gif|jpe?g|png|svg)$/i,
                use: [{
                    loader: 'url-loader',
                    query: {
                        limit: 10000
                    }
                }]
            },
            {
                test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
                use: [{
                    loader: 'url-loader',
                    query: {
                        limit: 20000
                    }
                }]
            }
        ]
    },
    plugins: [
        new webpack.HotModuleReplacementPlugin(),
        new ExtractTextPlugin({
            filename: '[name].[contenthash:16].css',
            allChunks: true
        })
    ]
};

delete baseConfig.entry;

module.exports = baseConfig;
