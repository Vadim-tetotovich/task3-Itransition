function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _Object$keys from 'babel-runtime/core-js/object/keys';

__$styleInject(".dynamic-table .dt-pagination{margin:20px auto}.dynamic-table .el-pagination,.vm{display:inline-block}.vm{vertical-align:middle}.font-color{color:#333;font-weight:400}.dynamic-table .align-left{text-align:left}.dynamic-table .align-center{text-align:center}.dynamic-table .align-right{text-align:right}.dynamic-table .mr5{margin-right:5px}.dynamic-table .mbt3{margin-top:3px;margin-bottom:3px}.dynamic-table .mr7{margin-right:7px}.dynamic-table .mtb3{margin-top:3px;margin-bottom:3px}.dynamic-table .fwn{font-weight:400}a{color:#337ab7;text-decoration:none}", undefined);

var mapList = null;

var enumerator = (function (getOutEnumerator) {
    if (mapList) {
        return mapList;
    }
    if (Util.isFunction(getOutEnumerator)) {
        mapList = getOutEnumerator();
    } else {
        return null;
    }
});

var componentRepository = null;

function parseComponents(fields) {
    var components = {};
    fields.keys().forEach(function (key) {
        if (/\.vue$/.test(key)) {
            var newKey = '';
            var component = '';
            if (/^\.\/[\w\W]*\//.test(key)) {
                newKey = key.split('/').pop();
            }
            if (newKey) {
                component = newKey.replace(/\.vue/, '');
            } else {
                component = key.replace(/^\.\//, '').replace(/\.vue/, '');
            }
            if (components[component]) {
                Util.log('\u7EC4\u4EF6\u5E93\u51FA\u73B0\u591A\u4E2A\u8DDF' + component + '\u4E00\u6837\u540D\u79F0\u7EC4\u4EF6\uFF0C\u8BF7\u786E\u4FDD\u7EC4\u4EF6\u5E93\u91CC\u7684\u5404\u4E2A\u7EC4\u4EF6\u540D\u79F0\u4E0D\u4E00\u6837', 'warn');
            } else {
                components[component] = fields(key);
            }
        }
    });
    return components;
}

var repository = (function (getOutRepository) {
    if (componentRepository) {
        return componentRepository;
    }
    if (Util.isFunction(getOutRepository)) {
        componentRepository = parseComponents(getOutRepository());
        return componentRepository;
    } else {
        var fields = require.context('./', false, /\.vue$/);
        return parseComponents(fields);
    }
});

function getAllExecStr(str, reg, index) {
    var ary = [];
    var res = reg.exec(str);
    while (res) {
        ary.push(res[index]);
        res = reg.exec(str);
    }
    return ary;
}

var Util = {
    EumnsMap: null,
    isFunction: function isFunction(val) {
        return Object.prototype.toString.call(val) === '[object Function]';
    },
    isObject: function isObject(val) {
        return Object.prototype.toString.call(val) === '[object Object]';
    },
    isArray: function isArray(val) {
        return Object.prototype.toString.call(val) === '[object Array]';
    },
    isNumber: function isNumber(val) {
        return Object.prototype.toString.call(val) === '[object Number]';
    },
    isString: function isString(val) {
        return Object.prototype.toString.call(val) === '[object String]';
    },
    log: function log(str, type) {
        type ? console[type](str) : console.log(str);
    },
    dealUdefOrNull: function dealUdefOrNull(str) {
        if (str === null || str === undefined) {
            str = '';
        }
        return str;
    },
    parseMapValue: function parseMapValue(option, key, directEnumsMap) {
        var enumsMap = directEnumsMap ? directEnumsMap : option.enumsMap;
        var length = enumsMap.length;
        for (var i = 0; i < length; i++) {
            var item = enumsMap[i];
            if (+item.key === +key) {
                return item.text;
            }
        }
        return false;
    },
    deepKeyValue: function deepKeyValue(str, row) {
        // console.log('str', str);
        var dotReg = /\./;
        if (dotReg.test(str)) {
            var keyArr = str.split('.');
            var value = '';
            for (var i = 0; i < keyArr.length; i++) {
                var key = keyArr[i];
                if (i === 0) {
                    value = row[key];
                    if (!value) {
                        return '';
                    }
                } else {
                    if (!value) {
                        return '';
                    }
                    value = value[key];
                }
            }
            if (value === undefined) {
                return '';
            } else {
                return value;
            }
        }
        return this.dealUdefOrNull(row[str]);
    },
    parseComponentParams: function parseComponentParams(option, self) {
        var _this = this;

        var params = {};
        var newParams = {};
        if (this.isObject(option.content)) {
            params = option.content.params || {};
            _Object$keys(params).forEach(function (key) {
                var reg = /\{\{([^\}]*)\}\}?/g;
                var text = '';
                if (reg.test(params[key])) {
                    text = _this.parseDynamicKeyValue(null, key, self.forebearInstance, params[key]);
                } else {
                    text = params[key];
                }

                newParams[key] = text;
            });
        }
        return newParams;
    },
    parseDynamicKeyValue: function parseDynamicKeyValue(option, optionKey, row, directStr) {
        var _this2 = this;

        var str = '';
        var res = '';
        var reg = /\{\{([^\}]*)\}\}?/g;
        var textReg = /^%([\w\W]*)%$/;
        if (directStr) {
            str = directStr;
        } else {
            str = option[optionKey];
        }
        if (textReg.test(str)) {
            return textReg.exec(str)[1];
        }
        res = reg.exec(str);
        if (res) {
            var data = '';
            res = [res[1]].concat(getAllExecStr(str, reg, 1));
            res.forEach(function (key) {
                str = str.replace(new RegExp('{{' + key + '}}'), function () {
                    data = _this2.deepKeyValue(key, row);
                    return data;
                });
            });
            if (this.isObject(data) || this.isFunction(data)) {
                return data;
            }
            return str;
        } else {
            if (optionKey === '_DIRECT_' || optionKey === 'url') {
                return str;
            } else {
                return this.deepKeyValue(str, row);
            }
        }
    },
    parseEnumeratorValue: function parseEnumeratorValue(option, text, self) {
        var eumnsMap = null;
        if (!this.EumnsMap) {
            this.EumnsMap = enumerator();
        }
        if (this.isString(option.enumsMap) && this.EumnsMap) {
            eumnsMap = this.deepKeyValue(option.enumsMap, this.EumnsMap.default);
        }
        if (this.isArray(option.enumsMap)) {
            text = this.parseMapValue(option, text);
        } else if (this.isString(option.enumsMap) && this.EumnsMap && this.isArray(eumnsMap)) {
            text = this.parseMapValue(option, text, eumnsMap);
        } else if (this.isString(option.enumsMap) && this.isArray(self.forebearInstance[option.enumsMap])) {
            text = this.parseMapValue(option, text, self.forebearInstance[option.enumsMap]);
        } else if (this.isString(option.enumsMap) && !this.EumnsMap && !this.isArray(self.forebearInstance[option.enumsMap]) || this.isString(option.enumsMap) && this.EumnsMap && !this.isArray(eumnsMap) && !this.isArray(self.forebearInstance[option.enumsMap])) {
            this.log('[' + option.label + ']\u5217\u7F3A\u5931key\u4E3A[' + option.enumsMap + ']\u7684\u679A\u4E3E\u5217\u8868', 'warn');
        }
        return text;
    },
    parseFilterValue: function parseFilterValue(option, text, self) {
        var filterText = text;
        if (this.isObject(option.filter) || this.isFunction(option.filter)) {
            filterText = this.dealFilterFn(this.isFunction(option.filter) ? option.filter : option.filter.handler, text, self, option.label, option.filter.params);
        } else if (this.isString(option.filter)) {
            filterText = this.dealFilterFn(option.filter, text, self, option.label);
        }
        return filterText;
    },
    dealFilterFn: function dealFilterFn(filter, text, self, label, params) {
        var filterText = '';
        var paramsArr = [];
        params = params || [];
        paramsArr = [text].concat(params, self.row);
        if (this.isFunction(filter)) {
            filterText = filter.apply(self.forebearInstance, paramsArr);
        } else if (this.isString(filter) && this.isFunction(self.forebearInstance[filter])) {
            filterText = self.forebearInstance[filter].apply(self.forebearInstance, paramsArr);
        } else if (this.isString(filter) && !this.isFunction(self.forebearInstance[filter])) {
            this.log('[' + label + ']\u5217\u9700\u8981\u5728\u5F53\u524D\u5B9E\u4F8Bmethods\u91CC\u7ED1\u5B9A\u65B9\u6CD5\u540D\u4E3A[' + filter + ']\u8FC7\u6EE4\u5668', 'warn');
            filterText = text;
        } else {
            filterText = text;
        }
        return filterText;
    },
    parseButtonClickEvent: function parseButtonClickEvent(option, text, self) {
        if (this.isObject(option.clickEvent)) {
            return this.extractClickEvent(option.clickEvent.handler, text, self);
        } else {
            return this.extractClickEvent(option.clickEvent, text, self);
        }
    },
    extractClickEvent: function extractClickEvent(clickEvent, text, self) {
        if (!this.dealClickEventFn(clickEvent, text, self)) {
            return null;
        }
        if (this.isFunction(clickEvent)) {
            return clickEvent;
        } else if (this.isString(clickEvent) && this.isFunction(self.forebearInstance[clickEvent])) {
            return self.forebearInstance[clickEvent];
        }
        return null;
    },
    dealClickEventFn: function dealClickEventFn(clickEvent, text, self) {
        if (!this.isFunction(clickEvent) && !this.isString(clickEvent) && !this.isObject(clickEvent)) {
            this.log('[' + text + ']\u6309\u94AE\u6CA1\u6709\u7ED1\u5B9A\u4E0A\u70B9\u51FB\u4E8B\u4EF6', 'warn');
            return false;
        } else if (this.isString(clickEvent) && !this.isFunction(self.forebearInstance[clickEvent]) || this.isObject(clickEvent) && this.isString(clickEvent.handler) && !this.isFunction(self.forebearInstance[clickEvent.handler])) {
            this.log('[' + text + ']\u6309\u94AE\u9700\u8981\u5728\u5F53\u524D\u5B9E\u4F8Bmethods\u91CC\u7ED1\u5B9A\u65B9\u6CD5\u540D\u4E3A[' + clickEvent + ']\u7684\u4E8B\u4EF6', 'warn');
            return false;
        }
        return true;
    },
    parseComponentContent: function parseComponentContent(option) {
        if (this.isObject(option.content)) {
            if (option.content.component) {
                return this.dealComponent(option.content.component);
            }
            if (option.content.default) {
                return this.dealComponent(option.content.default);
            }
            return this.dealComponent(option.content);
        } else {
            return this.dealComponent(option.content);
        }
    },
    dealComponent: function dealComponent(component) {
        var tag = component;
        if (this.isString(component)) {
            var AllComponents = repository();
            component = AllComponents[component];
            if (component && component.default) {
                // 兼容vue-loader@13.3.0以上的版本
                component = component.default;
            }
        }
        return !component ? tag : component;
    }
};

var cellButton = {
    render: function render() {
        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('el-button', { attrs: { "type": _vm.type, "size": _vm.size } }, [_vm._v(_vm._s(_vm.text))]);
    },
    staticRenderFns: [],
    props: ['type', 'size', 'text']
};

var cellTag = {
    render: function render() {
        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('el-tag', { attrs: { "type": _vm.type, "size": _vm.size } }, [_vm._v(_vm._s(_vm.text))]);
    },
    staticRenderFns: [],
    props: ['type', 'size', 'text']
};

var _TEXT_ = 'text';
var _LINK_ = 'link';
var _BUTTON_ = 'button';
var _TAG_ = 'tag';
var _COMPONENT_ = 'component';
var _COMBINE_ = 'combine';

function creatTextEle(createElement, self, itemOption, directText) {
    var text = '';
    if (directText) {
        text = directText;
    } else {
        var option = itemOption || self.perColumnOption;
        text = Util.parseDynamicKeyValue(option, 'prop', self.row);
        text = Util.parseEnumeratorValue(option, text, self);
        text = Util.parseFilterValue(option, text, self);
    }
    return createElement('span', {
        attrs: {
            class: 'vm fwn'
        },
        domProps: {
            innerHTML: text
        }
    });
}

function creatLinkEle(createElement, self, itemOption) {
    var option = itemOption || self.perColumnOption;
    var url = Util.parseDynamicKeyValue(option, 'url', self.row);
    var textEle = null;
    if (!itemOption) {
        textEle = creatTextEle(createElement, self);
    } else {
        textEle = creatTextEle(createElement, self, option);
    }
    return createElement('a', {
        attrs: {
            href: url,
            target: option.blank ? '_blank' : '_self'
        }
    }, [textEle]);
}

function creatButtonEle(createElement, self, itemOption) {
    var option = itemOption || self.perColumnOption;
    var text = option.prop;
    text = Util.parseDynamicKeyValue(option, 'prop', self.row, text);
    Util.dealClickEventFn(option.clickEvent, text, self);
    function clickHandler(e) {
        var cb = Util.parseButtonClickEvent(option, text, self);
        var paramsArr = [self.row];
        if (Util.isObject(option.clickEvent) && Util.isArray(option.clickEvent.params)) {
            paramsArr = paramsArr.concat(option.clickEvent.params);
        }
        paramsArr.push(e);
        if (Util.isFunction(cb)) {
            cb.apply(self.forebearInstance, paramsArr);
        }
    }
    return createElement(cellButton, {
        props: {
            type: option.btnType || 'primary',
            size: option.btnSize || 'small',
            text: text
        },
        nativeOn: {
            click: clickHandler
        }
    });
}

function createTagEle(createElement, self, itemOption) {
    var option = itemOption || self.perColumnOption;
    var content = option.content;
    var mutlElesArr = [];
    function createSingleLagEle(createElement, text, type, size) {
        return createElement(cellTag, {
            style: {
                marginRight: '5px'
            },
            props: {
                type: type,
                size: size
            },
            domProps: {
                innerHTML: text
            }
        });
    }
    content.forEach(function (item) {
        var text = '';
        if (item.prop) {
            item.label = option.label;
            text = Util.parseDynamicKeyValue(item, 'prop', self.row);
            text = Util.parseEnumeratorValue(item, text, self);
            text = Util.parseFilterValue(item, text, self);
        }
        mutlElesArr.push(createSingleLagEle(createElement, text, item.type || 'success', item.size || 'small'));
    });

    return createElement('div', {
        attrs: {
            class: 'mbt3'
        }
    }, mutlElesArr);
}

function createComponent(createElement, self, itemOption) {
    var option = itemOption || self.perColumnOption;
    var component = null;
    var params = {};
    component = Util.parseComponentContent(option);
    params = Util.parseComponentParams(option, self);
    return createElement(component, {
        props: {
            row: self.row,
            params: params
        }
    });
}

function createMutlEles(createElement, self) {
    var option = self.perColumnOption;
    var content = option.content;
    var mutlElesArr = [];
    content.forEach(function (item, index) {
        mutlElesArr.push({
            ele: dynamicProduceTypeEle(createElement, self, item),
            option: item
        });
    });
    mutlElesArr = mutlElesArr.map(function (obj) {
        var classStr = 'mtb3';
        if (obj.option.span) {
            classStr = 'vm mr7';
        }
        return createElement('div', {
            attrs: {
                class: classStr
            }
        }, [obj.ele]);
    });
    return createElement('div', mutlElesArr);
}

function dynamicProduceTypeEle(createElement, self, itemOption) {
    var option = itemOption || self.perColumnOption;
    var type = option.type;
    var ele = null;
    switch (type) {
        case _TEXT_:
            ele = creatTextEle(createElement, self, itemOption);
            break;
        case _LINK_:
            ele = creatLinkEle(createElement, self, itemOption);
            break;
        case _BUTTON_:
            ele = creatButtonEle(createElement, self, itemOption);
            break;
        case _TAG_:
            ele = createTagEle(createElement, self, itemOption);
            break;
        case _COMPONENT_:
            ele = createComponent(createElement, self, itemOption);
            break;
        default:
            ele = creatTextEle(createElement, self, itemOption);
    }
    return ele;
}

var tableCell = {
    render: function render(createElement) {
        var option = this.perColumnOption;
        var type = option.type;
        if (type === _COMBINE_) {
            return createMutlEles(createElement, this);
        } else {
            // 动态加载单元格数据
            return dynamicProduceTypeEle(createElement, this);
        }
    },

    props: {
        perColumnOption: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        row: {
            type: Object
        },
        index: {
            type: Number
        },
        forebearInstance: {
            type: Object
        }
    }
};

var dynamicTable = {
    render: function render() {
        var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _vm.tableShow ? _c('div', { staticClass: "dynamic-table" }, [_c('el-table', { directives: [{ name: "loading", rawName: "v-loading.body", value: _vm.tableOption.loading, expression: "tableOption.loading", modifiers: { "body": true } }], ref: "table", attrs: { "element-loading-text": _vm.tableOption.loadingText, "stripe": _vm.tableOption.stripe, "border": _vm.tableOption.border, "fit": _vm.tableOption.fit, "show-header": _vm.tableOption.showHeader, "highlight-current-row": _vm.tableOption.highlightCurrent, "current-row-key": _vm.tableOption.currentRowKey, "row-class-name": _vm.tableOption.rowClassName, "row-style": _vm.tableOption.rowStyle, "empty-text": _vm.tableOption.emptyText, "default-expand-all": _vm.tableOption.defaultExpandAll, "expand-row-keys": _vm.tableOption.expandRowKeys, "default-sort": _vm.tableOption.defaultSort, "tooltip-effect": _vm.tableOption.tooltipEffect, "show-summary": _vm.tableOption.showSummary, "sum-text": _vm.tableOption.sumText, "summary-method": _vm.tableOption.summaryMethod, "data": _vm.rowList, "height": _vm.tableOption && _vm.tableOption.height || null, "max-height": _vm.tableOption && _vm.tableOption.maxHeight || null }, on: { "sort-change": _vm.handleSortChange, "row-click": _vm.handleRowClick, "row-dblclick": _vm.handleRowDbclick, "cell-click": _vm.handleCellClick, "cell-dblclick": _vm.handleCellDbclick, "cell-mouse-enter": _vm.handleCellMouseEnter, "cell-mouse-leave": _vm.handleCellMouseLeave, "header-click": _vm.handleHeaderClick, "header-dragend": _vm.handleHeaderGragend, "current-change": _vm.handleCurrentChange, "expand": _vm.handleExpand, "selection-change": _vm.handleSelectionChange } }, [_vm._l(_vm.columnOptions, function (headerItem, index) {
            return headerItem.type === 'checkbox' && headerItem.show !== false ? _c('el-table-column', { key: index, attrs: { "type": "selection", "fixed": headerItem.fixed || null, "width": headerItem.width || 55 } }) : _vm._e();
        }), _vm._v(" "), _vm._l(_vm.columnOptions, function (headerItem, index) {
            return headerItem.type !== 'checkbox' && headerItem.show !== false ? _c('el-table-column', { key: headerItem.prop, attrs: { "type": headerItem.type === 'component' && headerItem.expand ? 'expand' : null, "fixed": headerItem.fixed, "width": headerItem.width || null, "min-width": headerItem.minWidth || null, "prop": headerItem.prop || null, "label": headerItem.label || null, "sortable": headerItem.sortable, "align": headerItem.align || 'left', "sort-method": headerItem.sortMethod, "show-overflow-tooltip": headerItem.showOverflowTooltip || false }, scopedSlots: _vm._u([{ key: "default", fn: function fn(scope) {
                        return headerItem.type !== 'checkbox' ? [headerItem.prop !== '$index' ? _c('table-cell', { class: headerItem.columnClass, attrs: { "forebearInstance": _vm.parentInstance, "index": index, "row": scope.row, "perColumnOption": headerItem } }) : _vm._e(), _vm._v(" "), headerItem.prop === '$index' ? _c('span', [_vm._v("\n                    " + _vm._s(scope.row.$index) + "\n                ")]) : _vm._e()] : undefined;
                    } }]) }) : _vm._e();
        })], 2), _vm._v(" "), _vm.pagination.show !== false ? _c('div', { staticClass: "dt-pagination", class: { 'align-left': _vm.pagination.align === 'left', 'align-center': _vm.pagination.align === 'center', 'align-right': _vm.pagination.align === 'right' } }, [_c('el-pagination', { attrs: { "current-page": _vm.pagination.currentPage, "page-size": _vm.pagination.pageSize, "layout": _vm.pagination.layout || 'total, prev, pager, next', "total": _vm.pagination.total, "page-sizes": _vm.pagination.pageSizes, "small": _vm.pagination.small }, on: { "current-change": _vm.handlePageChange, "size-change": _vm.handleSizeChange } })], 1) : _vm._e()], 1) : _vm._e();
    },
    staticRenderFns: [],
    name: 'dynamic-table',
    data: function data() {
        return {
            tableShow: true,
            parentInstance: null
        };
    },

    props: {
        'checkboxSelected': {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        'tableOption': {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        'columnOptions': {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        'rowList': {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        'pagination': {
            type: Object,
            default: function _default() {
                return {
                    show: false,
                    currentPage: 1,
                    pageSize: 10,
                    total: 100,
                    align: 'left'
                };
            }
        },
        'totalPage': {
            type: Number,
            default: 100
        }
    },
    watch: {
        rowList: {
            handler: function handler() {
                var _this = this;

                if (this.rowList.length) {
                    this.rowList.map(function (item, index) {
                        item.$index = index + 1;
                    });
                    this.$nextTick(function () {
                        _this.updateCheckboxSelectedList();
                    });
                }
            },
            deep: true
        },
        columnOptions: {
            handler: function handler(n, o) {
                var _this2 = this;

                if (_JSON$stringify(n) === _JSON$stringify(o)) {
                    return;
                }
                this.tableShow = false;
                this.$nextTick(function () {
                    _this2.tableShow = true;
                });
            },
            deep: true
        },
        checkboxSelected: {
            handler: function handler() {
                this.updateCheckboxSelectedList();
            },
            deep: true
        },
        totalPage: function totalPage() {
            this.pagination.total = this.totalPage;
        }
    },
    methods: {
        handlePageChange: function handlePageChange(val) {
            this.$emit('pageChange', val);
        },
        handleSizeChange: function handleSizeChange(val) {
            this.$emit('sizeChange', val);
        },

        /**
         * 提供 element table 的 clearSelection 方法
         * @param selection
         */
        clearSelection: function clearSelection(selection) {
            this.$refs.table.clearSelection(selection);
        },

        /**
         * 提供 element table 的 toggleRowSelection 方法
         * @param row
         * @param selected
         */
        toggleRowSelection: function toggleRowSelection(row, selected) {
            this.$refs.table.toggleRowSelection(row, selected);
        },
        handleRowClick: function handleRowClick() {
            this.$emit.apply(this, ['row-click'].concat(Array.prototype.slice.call(arguments)));
        },
        handleRowDbclick: function handleRowDbclick() {
            this.$emit.apply(this, ['row-dbclick'].concat(Array.prototype.slice.call(arguments)));
        },
        handleCellClick: function handleCellClick() {
            this.$emit.apply(this, ['cell-click'].concat(Array.prototype.slice.call(arguments)));
        },
        handleCellDbclick: function handleCellDbclick() {
            this.$emit.apply(this, ['cell-dblclick'].concat(Array.prototype.slice.call(arguments)));
        },
        handleHeaderClick: function handleHeaderClick() {
            this.$emit.apply(this, ['header-click'].concat(Array.prototype.slice.call(arguments)));
        },
        handleHeaderGragend: function handleHeaderGragend() {
            this.$emit.apply(this, ['header-dragend'].concat(Array.prototype.slice.call(arguments)));
        },
        handleCurrentChange: function handleCurrentChange() {
            this.$emit.apply(this, ['current-change'].concat(Array.prototype.slice.call(arguments)));
        },
        handleExpand: function handleExpand() {
            this.$emit.apply(this, ['expand'].concat(Array.prototype.slice.call(arguments)));
        },
        handleCellMouseEnter: function handleCellMouseEnter() {
            this.$emit.apply(this, ['cell-mouse-enter'].concat(Array.prototype.slice.call(arguments)));
        },
        handleCellMouseLeave: function handleCellMouseLeave() {
            this.$emit.apply(this, ['cell-mouse-leave'].concat(Array.prototype.slice.call(arguments)));
        },
        handleSortChange: function handleSortChange(obj) {
            this.$emit.apply(this, ['sort-change'].concat(Array.prototype.slice.call(arguments)));
        },

        /**
         * todo
         * 转发 element table 的事件
         * @param action
         * @returns {Function}
         */
        handleEvent: function handleEvent(action) {
            var _self = this;
            // console.log('action name:', action);
            return function () {
                // console.log('emit');
                _self.$emit.apply(_self, [action].concat(Array.prototype.slice.call(arguments)));
            };
        },
        handleSelectionChange: function handleSelectionChange(rows) {
            this.$emit('checkboxSelectChange', rows);
        },
        updateCheckboxSelectedList: function updateCheckboxSelectedList() {
            var _this3 = this;

            if (this.checkboxSelected.length) {
                // let rows = [];
                var length = this.rowList.length;
                this.checkboxSelected.forEach(function (item) {
                    if (item <= length && item > 0) {
                        if (_this3.$refs.table) {
                            _this3.$refs.table.toggleRowSelection(_this3.rowList[item - 1]);
                        }
                        if (_this3.$refs.multipleTable) {
                            _this3.$refs.multipleTable.toggleRowSelection(_this3.rowList[item - 1]);
                        }
                    }
                });
            } else {
                if (this.$refs.table) {
                    this.$refs.table.clearSelection();
                }
                if (this.$refs.multipleTable) {
                    this.$refs.multipleTable.clearSelection();
                }
            }
        }
    },
    components: {
        tableCell: tableCell
    },
    mounted: function mounted() {
        var _this4 = this;

        this.parentInstance = this.tableOption.instance ? this.tableOption.instance : this.$parent;
        this.updateCheckboxSelectedList();
        this.$nextTick(function () {
            var table = null;
            if (_this4.$refs.table) {
                table = _this4.$refs.table;
            }
            if (_this4.$refs.multipleTable) {
                table = _this4.$refs.multipleTable;
            }
            _this4.parentInstance._table = table;
        });
    }
};

var eventBus = function (Vue) {
    return new Vue();
};

var tableGenerator = {
    enumerator: enumerator,
    repository: repository,
    install: function install(Vue, options) {
        Vue.component('tableGenerator', dynamicTable);
        Vue.prototype.$tableGenerator = eventBus(Vue);
    }
};

//auto install
if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(tableGenerator);
}

export default tableGenerator;
