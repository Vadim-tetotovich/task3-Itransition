import Vue from 'vue';
let id = 0;

export default {
    fulterByIndex (arr, range, index) {
        let newArr = [];
        arr.forEach((item, i) => {
            i++;
            for (var j = 0; j < index; j++) {

            }
        });
        let length = arr.length;
        index = index - 1;
        while (index < length) {
            newArr.push(arr[index]);
            index = index + range;
        }
        return newArr;
    },

    filterByKey (arr, key) {
        return arr.map((item) => {
            return item[key];
        });
    },

    toArray(obj) {
        return [].slice.call(obj);
    },

    destroyVM(vm) {
        vm &&
        vm.$el &&
        vm.$el.parentNode &&
        vm.$el.parentNode.removeChild(vm.$el);
    },

    createElm() {
        const elm = document.createElement('div');
        elm.id = 'app' + ++id;
        document.body.appendChild(elm);
        return elm;
    },

    createVue(Compo, mounted = false) {
        if (Object.prototype.toString.call(Compo) === '[object String]') {
            Compo = { template: Compo };
        }
        return new Vue(Compo).$mount(mounted === false ? null : this.createElm());
    }
}
