
import Vue from 'vue';
import ElementUI from 'element-ui';
import Util from '../util.js';
import dynamicTable from '../../src/dynamic-table.vue';
import repository from '../../src/components/index.js';
import enumerator from '../../src/enumerator.js';
import mapList from '../eumns-map-list/list';
repository(() => require.context('../components'));
enumerator(() => require('../eumns-map-list/list'));

Vue.use(ElementUI);
Vue.component('dynamicTableTest', dynamicTable);

const homelandEnumsMap = mapList.homelandMap;
const testBusinessData = [
    {
        name: "小明",
        age: '20',
        school: "北京大学",
        homeland: 231331
    }, {
        name: "晓东",
        age: '21',
        school: "清华大学",
        homeland: 345232
    },
    {
        name: "小丽",
        age: '20',
        school: "香港大学",
        id: 792,
        homeland: 133122
    }
];

describe('dynamicTable.vue', () => {
    let vm;
    afterEach(() => {
        Util.destroyVM(vm);
    });

    it('created', done => {
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            type: 'text',
                            prop: 'name'
                        }
                    ],
                    rowList: testBusinessData
                }
            }
        }, true);

        vm.$nextTick(() => {
            const cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell span'))
                .map(node => node.textContent);
            expect(cells).to.eql(Util.filterByKey(testBusinessData, 'name'));
            done();
        });
    });

    it('type is text', done => {
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            type: 'text',
                            prop: '我叫{{name}}',
                        },
                        {
                            type: 'text',
                            prop: 'age',
                            filter: value => {
                                return `${value}岁`
                            }
                        },
                        {
                            type: 'text',
                            prop: 'school',
                            filter: 'ageFilter1'
                        },
                        {
                            type: 'text',
                            prop: 'homeland',
                            enumsMap: 'testDeep.homelandMap'
                        }
                    ],
                    rowList: testBusinessData
                }
            },
            methods: {
                ageFilter1(value) {
                    return `在读：${value}`
                }
            }
        }, true);

        vm.$nextTick(() => {
            let cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell span'))
                .map(node => node.textContent);
            let nameTestData = Util.filterByKey(testBusinessData, 'name')
                .map(node => `我叫${node}`);
            let ageTestData = Util.filterByKey(testBusinessData, 'age')
                .map(node => `${node}岁`);
            let schoolTestData = Util.filterByKey(testBusinessData, 'school')
                .map(node => `在读：${node}`);
            let homelandTestDaya = homelandEnumsMap
                .map(node => node.text);
            expect(Util.fulterByIndex(cells, 4, 1)).to.eql(nameTestData);
            expect(Util.fulterByIndex(cells, 4, 2)).to.eql(ageTestData);
            expect(Util.fulterByIndex(cells, 4, 3)).to.eql(schoolTestData);
            expect(Util.fulterByIndex(cells, 4, 4)).to.eql(homelandTestDaya);
            done();
        });
    });

    it('type is link', done => {
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            prop: 'school',
                            label: '学校',
                            type: 'link',
                            blank: true,
                            url: 'https://www.baidu.com/s?wd={{school}}'
                        }
                    ],
                    rowList: testBusinessData
                }
            }
        }, true);

        vm.$nextTick(() => {
            const cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell a'));
            let linkViewData = cells
                .map(node => node.getAttribute('href'));
            let schoolTestData = Util.filterByKey(testBusinessData, 'school')
                .map(node => `https://www.baidu.com/s?wd=${node}`);
            expect(linkViewData).to.eql(schoolTestData);
            cells.forEach(node => {
                expect(node.getAttribute('target')).to.equal('_blank');
            });
            done();
        });
    });

    it('type is button', done => {
        let clickTest1 = null;
        let clickTest2 = null;
        let clickTest3 = null;
        let clickTest4 = null;
        let clickTest5 = null;
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            prop: '%处理1%',
                            label: '操作',
                            type: 'button',
                            clickEvent: 'clickTest1'
                        },
                        {
                            prop: '%处理2%',
                            label: '操作',
                            type: 'button',
                            clickEvent: {
                                handler: 'clickTest2',
                                params: ['aaa', 'bbb']
                            }
                        }
                    ],
                    rowList: testBusinessData
                }
            },
            methods: {
                clickTest1() {
                    clickTest1 = 'test1';
                },
                clickTest2(e, p1, p2, row) {
                    clickTest2 = e;
                    clickTest3 = p1;
                    clickTest4 = p2;
                    clickTest5 = row;
                }
            }
        }, true);
        vm.$nextTick(() => {
            Util.toArray(vm.$el.querySelectorAll('tbody .cell button'))
                .forEach(node => node.click());
            setTimeout(_ => {
                expect(clickTest1).to.equal('test1');
                expect(clickTest2).to.exist;
                expect(clickTest3).to.equal('aaa');
                expect(clickTest4).to.equal('bbb');
                expect(clickTest5).to.exist;
            }, 200)
            done();
        });

    });

    it('type is tag', done => {
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            label: '标签',
                            type: 'tag',
                            content: [
                                {type: 'gray', prop: '%标签1%'}, {type: 'primary', prop: '{{homeland}}', enumsMap: 'homelandMap'}
                            ]
                        }
                    ],
                    rowList: testBusinessData
                }
            }
        }, true);
        vm.$nextTick(() => {
            const cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell span'));
            expect(cells[0].getAttribute('class')).to.include('el-tag--gray');
            expect(cells[0].textContent).to.equal('标签1');
            expect(cells[1].getAttribute('class')).to.include('el-tag--primary');
            expect(cells[1].textContent).to.equal('北京');
            done();
        });
    });

    it('type is component', done => {
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            label: '自定义组件',
                            type: 'component',
                            content: 'test1'
                        },
                        {
                            label: '自定义组件',
                            type: 'component',
                            content: {
                                component: 'test2',
                                params: {p: 'some params'}
                            }
                        }
                    ],
                    rowList: testBusinessData
                }
            }
        }, true);
        vm.$nextTick(() => {
            const cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell .component'));
            const rowViewData = cells[1].querySelector('.row').textContent;
            const paramsViewData = cells[1].querySelector('.params').textContent;
            expect(cells[0].textContent).to.include('test1');
            expect(rowViewData).to.exist;
            expect(paramsViewData).to.include('some params');
            done();
        });
    });

    it('type is combine', done => {
        let clickTest = null;
        vm = Util.createVue({
            template: `
                <dynamic-table-test
                    :columnOptions="columnOptions"
                    :rowList="rowList">
                </dynamic-table-test>
            `,
            data() {
                return {
                    columnOptions: [
                        {
                            label: '组合',
                            type: 'combine',
                            content: [
                                {
                                    type: 'text',
                                    prop: 'name',
                                },
                                {
                                    prop: 'school',
                                    label: '学校',
                                    type: 'link',
                                    blank: true,
                                    url: 'https://www.baidu.com/s?wd={{school}}'
                                },
                                {
                                    label: '标签',
                                    type: 'tag',
                                    content: [{type: 'gray', prop: '%标签%'}]
                                },
                                {
                                    prop: '%处理1%',
                                    type: 'button',
                                    clickEvent: 'clickTest1'
                                },
                                {
                                    label: '自定义组件',
                                    type: 'component',
                                    content: 'test1'
                                }
                            ]
                        }
                    ],
                    rowList: testBusinessData
                }
            },
            methods: {
                clickTest1() {
                    clickTest = 'clickTest';
                }
            }
        }, true);
        vm.$nextTick(() => {
            const cells = Util.toArray(vm.$el.querySelectorAll('tbody .cell'));
            const combineEles = cells[0].querySelectorAll('.mtb3');
            combineEles[3].querySelector('button').click();
            expect(combineEles[0].querySelector('span').textContent).to.equal(testBusinessData[0].name);
            expect(combineEles[1].querySelector('a').getAttribute('href')).to.equal(`https://www.baidu.com/s?wd=${testBusinessData[0].school}`);
            expect(combineEles[2].querySelector('.el-tag').textContent).to.equal('标签');
            expect(combineEles[4].querySelector('.component').textContent).to.include('test1');
            setTimeout(_ => {
                expect(clickTest).to.equal('clickTest');
            }, 200);
            done();
        });
    });

})
