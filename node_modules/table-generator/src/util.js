import enumerator from './enumerator.js';
import repository from './components/index.js';

function getAllExecStr (str, reg, index) {
    let ary = [];
    let res = reg.exec(str);
    while (res) {
        ary.push(res[index]);
        res = reg.exec(str);
    }
    return ary;
}

export default {
    EumnsMap: null,
    isFunction (val) {
        return Object.prototype.toString.call(val) === '[object Function]';
    },
    isObject (val) {
        return Object.prototype.toString.call(val) === '[object Object]';
    },
    isArray (val) {
        return Object.prototype.toString.call(val) === '[object Array]';
    },
    isNumber (val) {
        return Object.prototype.toString.call(val) === '[object Number]';
    },
    isString (val) {
        return Object.prototype.toString.call(val) === '[object String]';
    },
    log (str, type) {
        type ? console[type](str) : console.log(str);
    },
    dealUdefOrNull (str) {
        if (str === null || str === undefined) {
            str = '';
        }
        return str;
    },
    parseMapValue (option, key, directEnumsMap) {
        let enumsMap = directEnumsMap ? directEnumsMap : option.enumsMap;
        let length = enumsMap.length;
        let text = '';
        for (let i = 0; i < length; i++) {
            let item = enumsMap[i];
            if (+item.key === +key) {
                return item.text;
            }
        }
        return false;
    },
    deepKeyValue (str, row) {
        // console.log('str', str);
        let dotReg = /\./;
        if (dotReg.test(str)) {
            let keyArr = str.split('.');
            let value = '';
            for (let i = 0; i <keyArr.length; i++ ) {
                let key = keyArr[i];
                if (i === 0) {
                    value = row[key];
                    if (!value) {
                        return '';
                    }
                } else {
                    if (!value) {
                        return '';
                    }
                    value = value[key];
                }
            }
            if (value === undefined) {
                return '';
            } else {
                return value;
            }
        }
        return this.dealUdefOrNull(row[str]);
    },
    parseComponentParams (option, self) {
        let params = {};
        let newParams = {};
        if (this.isObject(option.content)) {
            params = option.content.params || {};
            Object.keys(params).forEach((key) => {
                let reg = /\{\{([^\}]*)\}\}?/g;
                let text = '';
                if (reg.test(params[key])) {
                    text = this.parseDynamicKeyValue(null, key, self.forebearInstance, params[key]);
                } else {
                    text = params[key];
                }

                newParams[key] = text;
            });
        }
        return newParams;
    },
    parseDynamicKeyValue (option, optionKey, row, directStr) {
        let str = '';
        let res = '';
        let reg = /\{\{([^\}]*)\}\}?/g;
        let textReg = /^%([\w\W]*)%$/;
        if (directStr) {
            str = directStr;
        } else {
            str = option[optionKey]
        }
        if (textReg.test(str)) {
            return textReg.exec(str)[1];
        }
        res = reg.exec(str);
        if (res) {
            let data = '';
            res = [res[1]].concat(getAllExecStr(str, reg, 1));
            res.forEach((key) => {
                str = str.replace(new RegExp(`{{${key}}}`), () => {
                    data = this.deepKeyValue(key, row);
                    return data;
                });
            });
            if (this.isObject(data) || this.isFunction(data)) {
                return data;
            }
            return str;
        } else {
            if (optionKey === '_DIRECT_' || optionKey === 'url') {
                return str;
            } else {
                return this.deepKeyValue(str, row)
            }
        }
    },
    parseEnumeratorValue (option, text, self) {
        let eumnsMap = null;
        if (!this.EumnsMap) {
            this.EumnsMap = enumerator();
        }
        if (this.isString(option.enumsMap) && this.EumnsMap) {
            eumnsMap = this.deepKeyValue(option.enumsMap, this.EumnsMap.default);
        }
        if (this.isArray(option.enumsMap)) {
            text = this.parseMapValue(option, text);
        } else if (this.isString(option.enumsMap) && this.EumnsMap && this.isArray(eumnsMap)) {
            text = this.parseMapValue(option, text, eumnsMap);
        } else if (this.isString(option.enumsMap) && this.isArray(self.forebearInstance[option.enumsMap])) {
            text = this.parseMapValue(option, text, self.forebearInstance[option.enumsMap]);
        } else if (
        (this.isString(option.enumsMap) && !this.EumnsMap && !this.isArray(self.forebearInstance[option.enumsMap]))
        ||
        (this.isString(option.enumsMap) && this.EumnsMap && !this.isArray(eumnsMap) && !this.isArray(self.forebearInstance[option.enumsMap]))) {
            this.log(`[${option.label}]列缺失key为[${option.enumsMap}]的枚举列表`, 'warn');
        }
        return text;
    },
    parseFilterValue (option, text, self) {
        let filterText = text;
        if (this.isObject(option.filter) || this.isFunction(option.filter)) {
            filterText = this.dealFilterFn(this.isFunction(option.filter) ? option.filter : option.filter.handler, text, self, option.label, option.filter.params);
        } else if (this.isString(option.filter)) {
            filterText = this.dealFilterFn(option.filter, text, self, option.label);
        }
        return filterText;
    },
    dealFilterFn (filter, text, self, label, params) {
        let filterText = '';
        let paramsArr = [];
        params = params || [];
        paramsArr = [text].concat(params, self.row);
        if (this.isFunction(filter)) {
            filterText = filter.apply(self.forebearInstance, paramsArr);
        } else if (this.isString(filter) && this.isFunction(self.forebearInstance[filter])) {
            filterText = self.forebearInstance[filter].apply(self.forebearInstance, paramsArr);
        } else if (this.isString(filter) && !this.isFunction(self.forebearInstance[filter])) {
            this.log(`[${label}]列需要在当前实例methods里绑定方法名为[${filter}]过滤器`, 'warn');
            filterText = text;
        } else {
            filterText = text;
        }
        return filterText;
    },
    parseButtonClickEvent (option, text, self) {
        if (this.isObject(option.clickEvent)) {
            return this.extractClickEvent(option.clickEvent.handler, text, self);
        } else {
            return this.extractClickEvent(option.clickEvent, text, self);
        }
    },
    extractClickEvent (clickEvent, text, self) {
        if (!this.dealClickEventFn(clickEvent, text, self)) {
            return null;
        }
        if (this.isFunction(clickEvent)) {
            return clickEvent;
        } else if (this.isString(clickEvent) && this.isFunction(self.forebearInstance[clickEvent])) {
            return self.forebearInstance[clickEvent];
        }
        return null;
    },
    dealClickEventFn (clickEvent, text, self) {
        if (!this.isFunction(clickEvent) && !this.isString(clickEvent) && !this.isObject(clickEvent)) {
            this.log(`[${text}]按钮没有绑定上点击事件`, 'warn');
            return false;
        } else if ((this.isString(clickEvent) && !this.isFunction(self.forebearInstance[clickEvent])) || (this.isObject(clickEvent) && this.isString(clickEvent.handler) && !this.isFunction(self.forebearInstance[clickEvent.handler]))) {
            this.log(`[${text}]按钮需要在当前实例methods里绑定方法名为[${clickEvent}]的事件`, 'warn');
            return false;
        }
        return true;
    },
    parseComponentContent (option) {
        if (this.isObject(option.content)) {
            if (option.content.component) {
                return this.dealComponent(option.content.component);
            }
            if (option.content.default) {
                return this.dealComponent(option.content.default);
            }
            return this.dealComponent(option.content);
        } else {
            return this.dealComponent(option.content);
        }
    },
    dealComponent (component) {
        let tag = component;
        if (this.isString(component)) {
            let AllComponents = repository();
            component = AllComponents[component];
            if (component && component.default) {  // 兼容vue-loader@13.3.0以上的版本
                component = component.default;
            }
        }
        return !component ? tag : component;
    }
};
