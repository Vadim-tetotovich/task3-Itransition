import Util from './util';
import repository from './components/index.js';
import cellButton from './cell-components/button.vue';
import cellTag from './cell-components/tag.vue';

const _TEXT_ = 'text';
const _LINK_ = 'link';
const _BUTTON_ = 'button';
const _TAG_ = 'tag';
const _COMPONENT_ = 'component';
const _COMBINE_ = 'combine';

function creatTextEle (createElement, self, itemOption, directText) {
    let text = '';
    if (directText) {
        text = directText;
    } else {
        let option = itemOption || self.perColumnOption;
        text = Util.parseDynamicKeyValue(option, 'prop', self.row);
        text = Util.parseEnumeratorValue(option, text, self);
        text = Util.parseFilterValue(option, text, self);
    }
    return createElement(
        'span',
        {
            attrs: {
                class: 'vm fwn'
            },
            domProps: {
                innerHTML: text
            }
        }
    );
}

function creatLinkEle (createElement, self, itemOption) {
    let option = itemOption || self.perColumnOption;
    let url = Util.parseDynamicKeyValue(option, 'url', self.row);
    let textEle = null;
    if (!itemOption) {
        textEle = creatTextEle(createElement, self);
    } else {
        textEle = creatTextEle(createElement, self, option);
    }
    return createElement(
        'a',
        {
            attrs: {
                href: url,
                target: option.blank ? '_blank' : '_self'
            }
        },
        [textEle]
    );
}

function creatButtonEle (createElement, self, itemOption) {
    let option = itemOption || self.perColumnOption;
    let text = option.prop;
    text = Util.parseDynamicKeyValue(option, 'prop', self.row, text);
    Util.dealClickEventFn(option.clickEvent, text, self);
    function clickHandler (e) {
        let cb = Util.parseButtonClickEvent(option, text, self);
        let paramsArr = [self.row];
        if (Util.isObject(option.clickEvent) && Util.isArray(option.clickEvent.params)) {
            paramsArr = paramsArr.concat(option.clickEvent.params);
        }
        paramsArr.push(e);
        if (Util.isFunction(cb)) {
            cb.apply(self.forebearInstance, paramsArr);
        }
    }
    return createElement(
        cellButton,
        {
            props: {
                type: option.btnType || 'primary',
                size: option.btnSize || 'small',
                text
            },
            nativeOn: {
                click: clickHandler
            }
        }
    );
}

function createTagEle (createElement, self, itemOption) {
    let option = itemOption || self.perColumnOption;
    let content = option.content;
    let mutlElesArr = [];
    function createSingleLagEle (createElement, text, type, size) {
        return createElement(
            cellTag,
            {
                style: {
                    marginRight: '5px'
                },
                props: {
                    type,
                    size
                },
                domProps: {
                    innerHTML: text
                }
            }
        );
    }
    content.forEach((item) => {
        let text = '';
        let textEle = '';
        if (item.prop) {
            item.label = option.label;
            text = Util.parseDynamicKeyValue(item, 'prop', self.row);
            text = Util.parseEnumeratorValue(item, text, self);
            text = Util.parseFilterValue(item, text, self);
        }
        mutlElesArr.push(createSingleLagEle(createElement, text, item.type || 'success', item.size || 'small'));
    });

    return createElement(
        'div',
        {
            attrs: {
                class: 'mbt3'
            }
        },
        mutlElesArr
    );
}

function createComponent(createElement, self, itemOption) {
    let option = itemOption || self.perColumnOption;
    let component = null;
    let params = {};
    component = Util.parseComponentContent(option);
    params = Util.parseComponentParams(option, self);
    return createElement(
        component,
        {
            props: {
                row: self.row,
                params
            }
        }
    );
}

function createMutlEles (createElement, self) {
    let option = self.perColumnOption;
    let content = option.content;
    let mutlElesArr = [];
    content.forEach((item, index) => {
        mutlElesArr.push({
            ele: dynamicProduceTypeEle(createElement, self, item),
            option: item
        });
    });
    mutlElesArr = mutlElesArr.map((obj) => {
        let classStr = 'mtb3';
        if (obj.option.span) {
            classStr = 'vm mr7';
        }
        return createElement(
            'div',
            {
                attrs: {
                    class: classStr
                }
            },
            [obj.ele]
        );
    });
    return createElement(
        'div',
        mutlElesArr
    );
}

function dynamicProduceTypeEle (createElement, self, itemOption) {
    let option = itemOption || self.perColumnOption;
    let type = option.type;
    let ele = null;
    switch (type) {
        case _TEXT_:
            ele = creatTextEle(createElement, self, itemOption);
            break;
        case _LINK_:
            ele = creatLinkEle(createElement, self, itemOption);
            break;
        case _BUTTON_:
            ele = creatButtonEle(createElement, self, itemOption);
            break;
        case _TAG_:
            ele = createTagEle(createElement, self, itemOption);
            break;
        case _COMPONENT_:
            ele = createComponent(createElement, self, itemOption);
            break;
        default:
            ele = creatTextEle(createElement, self, itemOption);
    }
    return ele;
}

const tableCell = {
    render (createElement) {
        let option = this.perColumnOption;
        let type = option.type;
        if (type === _COMBINE_) {
            return createMutlEles(createElement, this);
        } else {
            // 动态加载单元格数据
            return dynamicProduceTypeEle(createElement, this);
        }
    },
    props: {
        perColumnOption: {
            type: Object,
            default: () => {
                return {};
            }
        },
        row: {
            type: Object
        },
        index: {
            type: Number
        },
        forebearInstance: {
            type: Object
        }
    }
};

export default tableCell;
