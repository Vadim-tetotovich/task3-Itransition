import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, Output, Input, ViewChild, NgModule } from '@angular/core';
import { MatSort, MatPaginator, MatTableModule, MatIconModule, MatMenuModule, MatButtonModule, MatSortModule, MatPaginatorModule, MatCheckboxModule, MatCardModule, MatSidenavModule } from '@angular/material';
import { DatePipe, CommonModule } from '@angular/common';
import { NgxSpanishPipeModule } from 'ngx-spanish-pipe';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-table-generator.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableGeneratorService = /** @class */ (function () {
    function TableGeneratorService() {
    }
    TableGeneratorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TableGeneratorService.ctorParameters = function () { return []; };
    /** @nocollapse */ TableGeneratorService.ngInjectableDef = ɵɵdefineInjectable({ factory: function TableGeneratorService_Factory() { return new TableGeneratorService(); }, token: TableGeneratorService, providedIn: "root" });
    return TableGeneratorService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableUtils = /** @class */ (function () {
    function TableUtils() {
    }
    /**
     * @param {?} array
     * @param {?} value
     * @return {?}
     */
    TableUtils.prototype.deleteInstance = /**
     * @param {?} array
     * @param {?} value
     * @return {?}
     */
    function (array, value) {
        for (var i = 0; i < array.length; i++) {
            if (value === array[i]) {
                array.splice(i, 1);
                break;
            }
        }
        return array;
    };
    /**
     * @param {?} data
     * @param {?} arrayData
     * @param {?} id
     * @return {?}
     */
    TableUtils.prototype.chargeMultiCheckArray = /**
     * @param {?} data
     * @param {?} arrayData
     * @param {?} id
     * @return {?}
     */
    function (data, arrayData, id) {
        /** @type {?} */
        var array = [];
        var _loop_1 = function (i) {
            arrayData.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item === data[i][id]) {
                    array[i] = true;
                }
            }));
        };
        for (var i = 0; i < data.length; i++) {
            _loop_1(i);
        }
        return array;
    };
    /**
     * @param {?} val
     * @param {?} decimals
     * @return {?}
     */
    TableUtils.prototype.transformToNumber = /**
     * @param {?} val
     * @param {?} decimals
     * @return {?}
     */
    function (val, decimals) {
        if (val !== undefined && val !== null) {
            decimals = decimals || decimals === 0 ? decimals : 2;
            if (isNaN(val)) {
                return val;
            }
            else {
                val = val.toLocaleString('es-ES', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
                if (val.includes(',')) {
                    val = this.covertMillarWithDecimalToSpanish(val);
                }
                else {
                    val = this.convertMillarToSpanish(val);
                }
                return val;
            }
        }
        else {
            return '';
        }
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    TableUtils.prototype.convertMillarToSpanish = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var splitVal = val.split('');
        if (splitVal.length === 4) {
            splitVal.splice(1, 0, '.');
        }
        val = '';
        splitVal.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            val += element;
        }));
        return val;
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    TableUtils.prototype.covertMillarWithDecimalToSpanish = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var splitVal = val.split(',');
        if (splitVal[0].length === 4) {
            /** @type {?} */
            var naturalNum = splitVal[0];
            splitVal[0] = '';
            naturalNum = naturalNum.split('');
            naturalNum.splice(1, 0, '.');
            naturalNum.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                splitVal[0] += element;
            }));
            val = splitVal[0] + "," + splitVal[1];
        }
        return val;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    TableUtils.prototype.copyArray = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var result = null;
        if (!item) {
            return result;
        }
        if (Array.isArray(item)) {
            result = [];
            item.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result.push(_this.copyArray(element));
            }));
        }
        else if (item instanceof Object && !(item instanceof Function)) {
            result = {};
            for (var key in item) {
                if (key) {
                    result[key] = this.copyArray(item[key]);
                }
            }
        }
        return result || item;
    };
    /**
     * @param {?} conditionalMulticheck
     * @param {?} keysMulticheck
     * @param {?} valueMulticheckToCompare
     * @param {?} data
     * @return {?}
     */
    TableUtils.prototype.chargeShowMulticheck = /**
     * @param {?} conditionalMulticheck
     * @param {?} keysMulticheck
     * @param {?} valueMulticheckToCompare
     * @param {?} data
     * @return {?}
     */
    function (conditionalMulticheck, keysMulticheck, valueMulticheckToCompare, data) {
        var _this = this;
        /** @type {?} */
        var showArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            showArray[index] = true;
        }));
        if (conditionalMulticheck && keysMulticheck && valueMulticheckToCompare) {
            var _loop_2 = function (i) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    if (!_this.suboperationConditional(conditionalMulticheck[i], valueMulticheckToCompare[i], element[keysMulticheck[i]])
                        && showArray[index]) {
                        showArray[index] = false;
                    }
                }));
            };
            for (var i = 0; i < keysMulticheck.length; i++) {
                _loop_2(i);
            }
        }
        return showArray;
    };
    /**
     * @param {?} conditional
     * @param {?} valueToCompare
     * @param {?} value
     * @return {?}
     */
    TableUtils.prototype.suboperationConditional = /**
     * @param {?} conditional
     * @param {?} valueToCompare
     * @param {?} value
     * @return {?}
     */
    function (conditional, valueToCompare, value) {
        switch (conditional) {
            case '<':
                return parseFloat(value) < parseFloat(valueToCompare);
            case '>':
                return parseFloat(value) > parseFloat(valueToCompare);
            case '===':
                return (value || value === 0 || value === false ? value.toString() : value) ===
                    (valueToCompare || valueToCompare === 0 || valueToCompare === false ? valueToCompare.toString() : valueToCompare);
            case '>=':
                return value >= valueToCompare;
            case '<=':
                return value <= valueToCompare;
            case '<day':
                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) < 0;
            case '>day':
                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) > 0;
        }
    };
    TableUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ TableUtils.ngInjectableDef = ɵɵdefineInjectable({ factory: function TableUtils_Factory() { return new TableUtils(); }, token: TableUtils, providedIn: "root" });
    return TableUtils;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-table-generator.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableGeneratorComponent = /** @class */ (function () {
    function TableGeneratorComponent(tableUtils, datePipe) {
        this.tableUtils = tableUtils;
        this.datePipe = datePipe;
        // tslint:disable-next-line:no-output-on-prefix
        this.onPageEvent = new EventEmitter();
        this.buttonEvent = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.sortChange = new EventEmitter();
        this.suboperationAction = new EventEmitter();
        this.trashAction = new EventEmitter();
        this.multiCheckAction = new EventEmitter();
        this.disabledMulticheck = false;
        this.displayedColumns = [];
        this.sortOptionData = null;
        this.suboperationsData = null;
        this.isSub = false;
        this.buttonOptionsData = null;
        this.paginatorOptionData = null;
        // Button controls
        this.showNewButton = false;
        this.multiCheckArray = [];
        this.multiCheckArrayData = [];
        this.decimalNum = 2;
        this.sharesNum = 0;
        this.suboperationsGeneratedData = [];
        this.showSuboperationsGeneratedData = [];
        this.multiMinSelected = -1;
        this.showMulticheck = [];
    }
    Object.defineProperty(TableGeneratorComponent.prototype, "classMap", {
        set: /**
         * @param {?} classMap
         * @return {?}
         */
        function (classMap) {
            var _this = this;
            classMap.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                _this.classList += item + " ";
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableGeneratorComponent.prototype, "dataSourceMap", {
        set: /**
         * @param {?} dataSource
         * @return {?}
         */
        function (dataSource) {
            this.dataSource = dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableGeneratorComponent.prototype, "columns", {
        set: /**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this.isSub = this.isSuboperation(columns);
            this.dataColumns = columns;
            this.displayedColumns = this.generateDisplay(columns);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableGeneratorComponent.prototype, "sortOptions", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.sort = new MatSort();
            this.sortOptionData = {
                activeSort: value.activeSort || this.dataColumns[0].name,
                direction: value.direction || 'asc'
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableGeneratorComponent.prototype, "paginatorOption", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.paginatorOptionData = {
                resultsLength: value.resultsLength || 0,
                limit: value.limit ? value.limit : 20
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableGeneratorComponent.prototype, "buttonOptions", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.buttonOptionsData = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} data
     * @return {?}
     */
    TableGeneratorComponent.prototype.generateDisplay = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var array = [];
        data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            array.push(item.name);
        }));
        return array;
    };
    // tslint:disable-next-line:cognitive-complexity
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} columns
     * @return {?}
     */
    TableGeneratorComponent.prototype.isSuboperation = 
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        if (columns && columns[0].name === 'btnSuboperations') {
            if (columns[0].suboperationData) {
                this.suboperationsData = columns[0].suboperationData;
            }
            if (columns[0].trashOption) {
                this.trashOption = true;
            }
            if (columns[0].multiCheck) {
                this.multiCheck = columns[0].multiCheck;
                this.multiCheckId = columns[0].multiCheck.id;
                this.multiNameToCheck = columns[0].multiCheck && columns[0].multiCheck.multiNameToCheck ?
                    columns[0].multiCheck.multiNameToCheck : null;
                this.multiNameValue = columns[0].multiCheck && columns[0].multiCheck.multiNameValue ?
                    columns[0].multiCheck.multiNameValue : null;
                this.multiMinSelected = columns[0].multiCheck && columns[0].multiCheck.multiMinSelected ?
                    columns[0].multiCheck.multiMinSelected : 0;
                this.conditionalMulticheck = columns[0].multiCheck && columns[0].multiCheck.conditionalMulticheck ?
                    columns[0].multiCheck.conditionalMulticheck : 0;
                this.keysMulticheck = columns[0].multiCheck && columns[0].multiCheck.keysMulticheck ?
                    columns[0].multiCheck.keysMulticheck : 0;
                this.valueMulticheckToCompare = columns[0].multiCheck && columns[0].multiCheck.valueMulticheckToCompare ?
                    columns[0].multiCheck.valueMulticheckToCompare : 0;
            }
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    TableGeneratorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @return {?}
     */
    TableGeneratorComponent.prototype.matSortChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.sortChange.emit($event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableGeneratorComponent.prototype.pageEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.multiCheckArray = [];
        this.onPageEvent.emit(event);
    };
    /**
     * @return {?}
     */
    TableGeneratorComponent.prototype.onMultiCheckAction = /**
     * @return {?}
     */
    function () {
        this.multiCheckAction.emit(this.multiCheckArrayData);
        this.multiCheckArrayData = [];
        this.multiCheckArray = [];
    };
    /**
     * @param {?} action
     * @param {?} row
     * @return {?}
     */
    TableGeneratorComponent.prototype.suboperationClicked = /**
     * @param {?} action
     * @param {?} row
     * @return {?}
     */
    function (action, row) {
        /** @type {?} */
        var data = {
            action: action,
            row: row
        };
        this.suboperationAction.emit(data);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    TableGeneratorComponent.prototype.trashOptionAction = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.trashAction.emit(row);
    };
    /**
     * @param {?} sort
     * @return {?}
     */
    TableGeneratorComponent.prototype.checkSort = /**
     * @param {?} sort
     * @return {?}
     */
    function (sort) {
        if (sort) {
            return sort;
        }
        else {
            this.sort = new MatSort();
            this.sort.direction = 'asc';
            this.sort.active = this.sortOptionData.activeSort;
            return this.sort;
        }
    };
    /**
     * @param {?} elem
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.getObjectToCompare = /**
     * @param {?} elem
     * @param {?} item
     * @return {?}
     */
    function (elem, item) {
        for (var i = 0; i < item.objectToCompare.length; i++) {
            if (item.objectToCompare[i].id === elem[item.name]) {
                return this.parseToDecimal(item.objectToCompare[i].label, item);
            }
        }
    };
    /**
     * @return {?}
     */
    TableGeneratorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.sortChange.emit(this.checkSort(this.sort));
        this.onPageEvent.emit(this.paginator);
        if (this.dataSource.connect) {
            this.dataSourceConnect = this.dataSource.connect().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (_this.suboperationsData) {
                    _this.showSuboperationData(data);
                }
                if (data && _this.multiCheck) {
                    _this.showMultiCheckButton = true;
                    _this.multiCheckArray = _this.tableUtils.chargeMultiCheckArray(_this.dataSource.data, _this.multiCheckArrayData, _this.multiCheck.id);
                    if (data.length > 0) {
                        _this.showMulticheck = _this.tableUtils.chargeShowMulticheck(_this.conditionalMulticheck, _this.keysMulticheck, _this.valueMulticheckToCompare, _this.dataSource.data);
                    }
                }
            }));
        }
    };
    /**
     * @param {?} row
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    TableGeneratorComponent.prototype.onRowClick = /**
     * @param {?} row
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    function (row, index, event) {
        if (this.multiCheck && event && event.target && event.target.getElementsByTagName('mat-checkbox') &&
            event.target.getElementsByTagName('mat-checkbox').length > 0) {
            if (this.multiCheckArray[index]) {
                this.multiCheckArray[index] = false;
                this.tableUtils.deleteInstance(this.multiCheckArrayData, row[this.multiCheckId]);
            }
            else {
                this.multiCheckArray[index] = true;
                this.multiCheckArrayData.push(row[this.multiCheckId]);
            }
        }
        else {
            this.rowClick.emit(row);
        }
    };
    /**
     * @param {?} elem
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.getInstaceName = /**
     * @param {?} elem
     * @param {?} item
     * @return {?}
     */
    function (elem, item) {
        /** @type {?} */
        var valueToShow = '';
        if (item.objectInstances) {
            for (var i = 0; i < item.objectInstances.length; i++) {
                if (elem[item.objectInstances[i]]) {
                    valueToShow = elem[item.objectInstances[i]];
                    elem = valueToShow;
                }
            }
            return this.parseToDecimal(valueToShow, item);
        }
        else {
            if (item.date) {
                return this.datePipe.transform(elem[item.name], 'dd/MM/yyyy');
            }
            return this.parseToDecimal(elem[item.name], item);
        }
    };
    /**
     * @param {?} value
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.parseToDecimal = /**
     * @param {?} value
     * @param {?} item
     * @return {?}
     */
    function (value, item) {
        if (item.isShares) {
            return this.tableUtils.transformToNumber(value, this.sharesNum);
        }
        if (item.isCurrency) {
            return this.tableUtils.transformToNumber(value, this.decimalNum);
        }
        return value;
    };
    // tslint:disable-next-line:cognitive-complexity
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} data
     * @return {?}
     */
    TableGeneratorComponent.prototype.showSuboperationData = 
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (Array.isArray(data) && data.length > 0) {
            data.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                _this.suboperationsGeneratedData[index] = _this.tableUtils.copyArray(_this.suboperationsData);
                _this.checkConditionalOptions(index, item);
                _this.showSuboperationsGeneratedData[index] = _this.suboperationsGeneratedData[index].length > 0 ? true : false;
            }));
        }
    };
    // tslint:disable-next-line:cognitive-complexity
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.checkConditionalOptions = 
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        var _this = this;
        this.suboperationsGeneratedData[index].forEach((/**
         * @param {?} instance
         * @param {?} i
         * @return {?}
         */
        function (instance, i) {
            if (instance.conditional && instance.valueToCompare && instance.itemToCompare) {
                if (typeof instance.conditional === 'string') {
                    if (!_this.tableUtils.suboperationConditional(instance.conditional, instance.valueToCompare, item[instance.itemToCompare])) {
                        return _this.spliceSuboperation(index, i, item);
                    }
                }
                else {
                    instance.conditional.forEach((/**
                     * @param {?} elem
                     * @param {?} j
                     * @return {?}
                     */
                    function (elem, j) {
                        if (!_this.tableUtils.suboperationConditional(elem, instance.valueToCompare[j], item[instance.itemToCompare[j]])) {
                            return _this.spliceSuboperation(index, i, item);
                        }
                    }));
                }
            }
        }));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.getButtonCondition = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.buttonConditions) {
            if (item.buttonConditions.value && item.buttonConditions.condition
                && item.buttonConditions.value === item.buttonConditions.condition) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    /**
     * @private
     * @param {?} index
     * @param {?} i
     * @param {?} item
     * @return {?}
     */
    TableGeneratorComponent.prototype.spliceSuboperation = /**
     * @private
     * @param {?} index
     * @param {?} i
     * @param {?} item
     * @return {?}
     */
    function (index, i, item) {
        this.suboperationsGeneratedData[index].splice(i, 1);
        return this.checkConditionalOptions(index, item);
    };
    /**
     * @return {?}
     */
    TableGeneratorComponent.prototype.isMulticheckDisabled = /**
     * @return {?}
     */
    function () {
        if (this.disabledMulticheck) {
            return true;
        }
        else {
            /** @type {?} */
            var minSelected = this.multiMinSelected && typeof this.multiMinSelected === 'string'
                ? parseFloat(this.multiMinSelected) : this.multiMinSelected;
            return this.multiCheckArrayData.length <= minSelected;
        }
    };
    /**
     * @return {?}
     */
    TableGeneratorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.dataSourceConnect) {
            this.dataSourceConnect.unsubscribe();
            this.dataSource.disconnect();
        }
    };
    TableGeneratorComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ngx-table-generator',
                    template: "<mat-card>\r\n    <div class=\"table-result\">\r\n        <div class=\"table-header\">\r\n            <div class=\"create-button-container\" *ngIf=\"buttonOptionsData || showMultiCheckButton\">\r\n                <ng-container *ngFor=\"let item of buttonOptionsData\">\r\n                    <button class=\"primary\" *ngIf=\"getButtonCondition(item)\" mat-button color=\"primary\" (click)=\"buttonEvent.emit({event: item.event, data: $event})\">\r\n                        <mat-icon>{{ item.icon }}</mat-icon>\r\n                        {{ item.label }}\r\n                    </button>\r\n                </ng-container>\r\n                <button *ngIf=\"showMultiCheckButton\" class=\"primary\" mat-button color=\"primary\" (click)=\"onMultiCheckAction()\" [disabled]=\"isMulticheckDisabled()\">\r\n                    <mat-icon>unarchive</mat-icon>\r\n                    {{ multiCheck.buttonLabel }}\r\n                </button>\r\n            </div>\r\n            <mat-paginator [length]=\"paginatorOptionData.resultsLength\" [pageSize]=\"paginatorOptionData.limit\" showFirstLastButtons (page)=\"pageEvent($event)\"\r\n                class=\"mat-paginator-sticky\" *ngIf=\"paginatorOptionData\"></mat-paginator>\r\n        </div>\r\n        <div class=\"result-table-wrapper\" [ngClass]=\"{'result-table-wrapper':!footerData, 'result-table-wrapper-with-footer':footerData}\">\r\n            <mat-table *ngIf=\"dataSource\" [dataSource]=\"dataSource\" matSort matSortDirection=\"{{sortOptionData.direction}}\" matSortActive=\"{{sortOptionData.activeSort}}\"\r\n                class=\"classList\" (matSortChange)=\"matSortChange($event)\" matSortDisableClear class=\"result-table mat-elevation-z8\">\r\n                <ng-container *ngFor=\"let item of dataColumns;\" matColumnDef=\"{{item.name}}\">\r\n                    <ng-container *ngIf=\"item.name === 'btnSuboperations'\" matColumnDef=\"btnSuboperations\" sticky>\r\n                        <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let item; let i = index\">\r\n                            <ng-container *ngIf=\"showSuboperationsGeneratedData[i]\">\r\n                                <button mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">\r\n                                    <mat-icon>more_vert</mat-icon>\r\n                                </button>\r\n                                <mat-menu #menu=\"matMenu\">\r\n                                    <button mat-menu-item *ngFor=\"let sub of suboperationsGeneratedData[i]\" (click)=\"suboperationClicked(sub.label, item)\">\r\n                                        <span class=\"margin-select\">{{sub.label}}</span>\r\n                                    </button>\r\n                                </mat-menu>\r\n                            </ng-container>\r\n                            <button mat-icon-button (click)=\"$event.stopPropagation(); trashOptionAction(item)\" *ngIf=\"trashOption\">\r\n                                <mat-icon>delete_forever</mat-icon>\r\n                            </button>\r\n                            <ng-container *ngIf=\"multiCheck\">\r\n                                <mat-checkbox *ngIf=\"showMulticheck[i]\" [checked]=\"multiCheckArray[i]\"></mat-checkbox>\r\n                            </ng-container>\r\n                        </mat-cell>\r\n                    </ng-container>\r\n                    <ng-container>\r\n                        <ng-container *ngIf=\"item.sort; else NotSorteable\">\r\n                            <mat-header-cell mat-sort-header disableClear=\"true\" *matHeaderCellDef>\r\n                                {{item.label}}\r\n                            </mat-header-cell>\r\n                        </ng-container>\r\n                        <ng-template #NotSorteable>\r\n                            <mat-header-cell disableClear=\"true\" *matHeaderCellDef>\r\n                                {{item.label}}\r\n                            </mat-header-cell>\r\n                        </ng-template>\r\n                        <mat-cell [class.number-cell]=\"item.isCurrency || item.isShares\" *matCellDef=\"let element\">\r\n                            <mat-checkbox selected *ngIf=\"item.isCheckbox; else showLabel\" [checked]=\"element[item.name]\"></mat-checkbox>\r\n                            <ng-template #showLabel>\r\n                                <ng-container *ngIf=\"showWhen && element[item.showWhen]; else showWhen\"></ng-container>\r\n                                <ng-template #showWhen>\r\n                                    <ng-container *ngIf=\"item.objectToCompare; else showInstance\">\r\n                                        {{getObjectToCompare(element, item)}}\r\n                                    </ng-container>\r\n                                    <ng-template #showInstance>\r\n                                        {{getInstaceName(element, item) }}\r\n                                    </ng-template>\r\n                                </ng-template>\r\n                            </ng-template>\r\n                        </mat-cell>\r\n                    </ng-container>\r\n                </ng-container>\r\n                <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\r\n                <mat-row *matRowDef=\"let row; columns: displayedColumns; let index = index; \" (click)=\"onRowClick(row, index, $event)\"></mat-row>\r\n            </mat-table>\r\n        </div>\r\n        <div *ngIf=\"footerData\" class=\"table-footer-data\">\r\n            <ng-container *ngFor=\"let item of footerData;\">\r\n                <div class=\"data-group\">\r\n                    <h3>{{item.name}}:</h3>\r\n                    <p>{{item.value | NgxNumberEsPipe:item.decimal}}</p>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</mat-card>"
                }] }
    ];
    /** @nocollapse */
    TableGeneratorComponent.ctorParameters = function () { return [
        { type: TableUtils },
        { type: DatePipe }
    ]; };
    TableGeneratorComponent.propDecorators = {
        onPageEvent: [{ type: Output }],
        buttonEvent: [{ type: Output }],
        rowClick: [{ type: Output }],
        sortChange: [{ type: Output }],
        suboperationAction: [{ type: Output }],
        trashAction: [{ type: Output }],
        multiCheckAction: [{ type: Output }],
        disabledMulticheck: [{ type: Input }],
        footerData: [{ type: Input }],
        sort: [{ type: ViewChild, args: [MatSort, { static: false },] }],
        paginator: [{ type: ViewChild, args: [MatPaginator, { static: false },] }],
        classMap: [{ type: Input, args: ['classMap',] }],
        dataSourceMap: [{ type: Input, args: ['dataSource',] }],
        columns: [{ type: Input, args: ['dataColumnsTable',] }],
        sortOptions: [{ type: Input, args: ['sortOptions',] }],
        paginatorOption: [{ type: Input, args: ['paginatorOption',] }],
        buttonOptions: [{ type: Input, args: ['buttonOptions',] }]
    };
    return TableGeneratorComponent;
}());
if (false) {
    /** @type {?} */
    TableGeneratorComponent.prototype.onPageEvent;
    /** @type {?} */
    TableGeneratorComponent.prototype.buttonEvent;
    /** @type {?} */
    TableGeneratorComponent.prototype.rowClick;
    /** @type {?} */
    TableGeneratorComponent.prototype.sortChange;
    /** @type {?} */
    TableGeneratorComponent.prototype.suboperationAction;
    /** @type {?} */
    TableGeneratorComponent.prototype.trashAction;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiCheckAction;
    /** @type {?} */
    TableGeneratorComponent.prototype.disabledMulticheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.footerData;
    /** @type {?} */
    TableGeneratorComponent.prototype.sort;
    /** @type {?} */
    TableGeneratorComponent.prototype.paginator;
    /**
     * @type {?}
     * @private
     */
    TableGeneratorComponent.prototype.classList;
    /** @type {?} */
    TableGeneratorComponent.prototype.dataColumns;
    /** @type {?} */
    TableGeneratorComponent.prototype.displayedColumns;
    /** @type {?} */
    TableGeneratorComponent.prototype.dataSource;
    /** @type {?} */
    TableGeneratorComponent.prototype.sortOptionData;
    /**
     * @type {?}
     * @private
     */
    TableGeneratorComponent.prototype.suboperationsData;
    /**
     * @type {?}
     * @private
     */
    TableGeneratorComponent.prototype.isSub;
    /** @type {?} */
    TableGeneratorComponent.prototype.buttonOptionsData;
    /** @type {?} */
    TableGeneratorComponent.prototype.paginatorOptionData;
    /** @type {?} */
    TableGeneratorComponent.prototype.trashOption;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiCheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.showNewButton;
    /** @type {?} */
    TableGeneratorComponent.prototype.showMultiCheckButton;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiCheckArray;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiCheckArrayData;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiCheckId;
    /** @type {?} */
    TableGeneratorComponent.prototype.dataSourceConnect;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiNameToCheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiNameValue;
    /** @type {?} */
    TableGeneratorComponent.prototype.decimalNum;
    /** @type {?} */
    TableGeneratorComponent.prototype.sharesNum;
    /** @type {?} */
    TableGeneratorComponent.prototype.suboperationsGeneratedData;
    /** @type {?} */
    TableGeneratorComponent.prototype.showSuboperationsGeneratedData;
    /** @type {?} */
    TableGeneratorComponent.prototype.multiMinSelected;
    /** @type {?} */
    TableGeneratorComponent.prototype.showMulticheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.conditionalMulticheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.keysMulticheck;
    /** @type {?} */
    TableGeneratorComponent.prototype.valueMulticheckToCompare;
    /** @type {?} */
    TableGeneratorComponent.prototype.tableUtils;
    /** @type {?} */
    TableGeneratorComponent.prototype.datePipe;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-table-generator.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableGeneratorModule = /** @class */ (function () {
    function TableGeneratorModule() {
    }
    TableGeneratorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TableGeneratorComponent
                    ],
                    imports: [
                        CommonModule,
                        MatTableModule,
                        MatIconModule,
                        MatMenuModule,
                        MatButtonModule,
                        MatSortModule,
                        MatPaginatorModule,
                        MatCheckboxModule,
                        MatCardModule,
                        MatSidenavModule,
                        NgxSpanishPipeModule
                    ],
                    exports: [
                        TableGeneratorComponent
                    ],
                    providers: [
                        TableUtils,
                        DatePipe
                    ],
                },] }
    ];
    return TableGeneratorModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-table-generator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TableGeneratorComponent, TableGeneratorModule, TableGeneratorService, TableUtils as ɵa };
//# sourceMappingURL=ngx-table-generator.js.map
