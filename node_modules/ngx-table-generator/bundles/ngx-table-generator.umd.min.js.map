{"version":3,"sources":["ng://ngx-table-generator/lib/ngx-table-generator.service.ts","ng://ngx-table-generator/lib/utils.ts","ng://ngx-table-generator/lib/ngx-table-generator.component.ts","ng://ngx-table-generator/lib/ngx-table-generator.module.ts"],"names":["TableGeneratorService","Injectable","args","providedIn","TableUtils","prototype","deleteInstance","array","value","i","length","splice","chargeMultiCheckArray","data","arrayData","id","map","item","transformToNumber","val","decimals","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","includes","this","covertMillarWithDecimalToSpanish","convertMillarToSpanish","splitVal","split","forEach","element","naturalNum","copyArray","_this","result","Array","isArray","push","Object","Function","key","chargeShowMulticheck","conditionalMulticheck","keysMulticheck","valueMulticheckToCompare","showArray","index","suboperationConditional","conditional","valueToCompare","parseFloat","toString","Date","setHours","TableGeneratorComponent","tableUtils","datePipe","onPageEvent","EventEmitter","buttonEvent","rowClick","sortChange","suboperationAction","trashAction","multiCheckAction","disabledMulticheck","displayedColumns","sortOptionData","suboperationsData","isSub","buttonOptionsData","paginatorOptionData","showNewButton","multiCheckArray","multiCheckArrayData","decimalNum","sharesNum","suboperationsGeneratedData","showSuboperationsGeneratedData","multiMinSelected","showMulticheck","defineProperty","classMap","classList","dataSource","columns","isSuboperation","dataColumns","generateDisplay","sort","MatSort","activeSort","name","direction","resultsLength","limit","suboperationData","trashOption","multiCheck","multiCheckId","multiNameToCheck","multiNameValue","ngOnInit","matSortChange","$event","emit","pageEvent","event","onMultiCheckAction","suboperationClicked","action","row","trashOptionAction","checkSort","active","getObjectToCompare","elem","objectToCompare","parseToDecimal","label","ngAfterViewInit","paginator","connect","dataSourceConnect","subscribe","showSuboperationData","showMultiCheckButton","onRowClick","target","getElementsByTagName","getInstaceName","valueToShow","objectInstances","date","transform","isShares","isCurrency","checkConditionalOptions","instance","itemToCompare","spliceSuboperation","j","getButtonCondition","buttonConditions","condition","isMulticheckDisabled","minSelected","ngOnDestroy","unsubscribe","disconnect","Component","selector","template","DatePipe","Output","Input","ViewChild","static","MatPaginator","TableGeneratorModule","NgModule","declarations","imports","CommonModule","MatTableModule","MatIconModule","MatMenuModule","MatButtonModule","MatSortModule","MatPaginatorModule","MatCheckboxModule","MatCardModule","MatSidenavModule","NgxSpanishPipeModule","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableGeneratorService {\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TableUtils {\r\n    public deleteInstance(array, value) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (value === array[i]) {\r\n                array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public chargeMultiCheckArray(data, arrayData, id) {\r\n        const array = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            arrayData.map((item) => {\r\n                if (item === data[i][id]) {\r\n                    array[i] = true;\r\n                }\r\n            });\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public transformToNumber(val, decimals) {\r\n        if (val !== undefined && val !== null) {\r\n            decimals = decimals || decimals === 0 ? decimals : 2;\r\n            if (isNaN(val)) {\r\n                return val;\r\n            } else {\r\n                val = val.toLocaleString('es-ES', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });\r\n                if (val.includes(',')) {\r\n                    val = this.covertMillarWithDecimalToSpanish(val);\r\n                } else {\r\n                    val = this.convertMillarToSpanish(val);\r\n                }\r\n                return val;\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    private convertMillarToSpanish(val: any) {\r\n        const splitVal = val.split('');\r\n        if (splitVal.length === 4) {\r\n            splitVal.splice(1, 0, '.');\r\n        }\r\n        val = '';\r\n        splitVal.forEach(element => {\r\n            val += element;\r\n        });\r\n        return val;\r\n    }\r\n\r\n    private covertMillarWithDecimalToSpanish(val: any) {\r\n        const splitVal = val.split(',');\r\n        if (splitVal[0].length === 4) {\r\n            let naturalNum = splitVal[0];\r\n            splitVal[0] = '';\r\n            naturalNum = naturalNum.split('');\r\n            naturalNum.splice(1, 0, '.');\r\n            naturalNum.forEach(element => {\r\n                splitVal[0] += element;\r\n            });\r\n            val = `${splitVal[0]},${splitVal[1]}`;\r\n        }\r\n        return val;\r\n    }\r\n\r\n    public copyArray(item) {\r\n        let result = null;\r\n        if (!item) {\r\n            return result;\r\n        }\r\n        if (Array.isArray(item)) {\r\n            result = [];\r\n            item.forEach((element) => {\r\n                result.push(this.copyArray(element));\r\n            });\r\n        } else if (item instanceof Object && !(item instanceof Function)) {\r\n            result = {};\r\n            for (const key in item) {\r\n                if (key) {\r\n                    result[key] = this.copyArray(item[key]);\r\n                }\r\n            }\r\n        }\r\n        return result || item;\r\n    }\r\n\r\n    public chargeShowMulticheck(conditionalMulticheck, keysMulticheck, valueMulticheckToCompare, data) {\r\n        const showArray = [];\r\n        data.forEach((element, index) => {\r\n            showArray[index] = true;\r\n        });\r\n        if (conditionalMulticheck && keysMulticheck && valueMulticheckToCompare) {\r\n            for (let i = 0; i < keysMulticheck.length; i++) {\r\n                data.forEach((element, index) => {\r\n                    if (!this.suboperationConditional(conditionalMulticheck[i], valueMulticheckToCompare[i], element[keysMulticheck[i]])\r\n                        && showArray[index]) {\r\n                        showArray[index] = false;\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n        return showArray;\r\n    }\r\n\r\n    public suboperationConditional(conditional, valueToCompare, value) {\r\n        switch (conditional) {\r\n            case '<':\r\n                return parseFloat(value) < parseFloat(valueToCompare);\r\n            case '>':\r\n                return parseFloat(value) > parseFloat(valueToCompare);\r\n            case '===':\r\n                return (value || value === 0 || value === false ? value.toString() : value) ===\r\n                    (valueToCompare || valueToCompare === 0 || valueToCompare === false ? valueToCompare.toString() : valueToCompare);\r\n            case '>=':\r\n                return value >= valueToCompare;\r\n            case '<=':\r\n                return value <= valueToCompare;\r\n            case '<day':\r\n                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) < 0;\r\n            case '>day':\r\n                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) > 0;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';\nimport { MatSort, MatPaginator } from '@angular/material';\nimport { Subscription } from 'rxjs';\nimport { DatePipe } from '@angular/common';\nimport { TableUtils } from './utils';\nimport { ITableColumn } from './interfaces/ITableColumn';\nimport { ISortOption } from './interfaces/ISortOptions';\nimport { IPaginatorOptions } from './interfaces/IPaginatorOptions';\nimport { IFooterData } from './interfaces/IFooterData';\nimport { IButtonOptions } from './interfaces/IButtonOptions';\n\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'ngx-table-generator',\n    templateUrl: './ngx-table-generator.component.html',\n})\n\nexport class TableGeneratorComponent implements OnInit, AfterViewInit, OnDestroy {\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() onPageEvent = new EventEmitter<any>();\n    @Output() buttonEvent = new EventEmitter<any>();\n    @Output() rowClick = new EventEmitter<any>();\n    @Output() sortChange = new EventEmitter<any>();\n    @Output() suboperationAction = new EventEmitter<any>();\n    @Output() trashAction = new EventEmitter<any>();\n    @Output() multiCheckAction = new EventEmitter<any>();\n\n    @Input() disabledMulticheck = false;\n    @Input() footerData: IFooterData; // [{name: 'string', value: 'string'}];\n\n    @ViewChild(MatSort, {static: false}) sort: MatSort;\n    @ViewChild(MatPaginator, {static: false}) paginator: MatPaginator;\n\n    private classList: string;\n    public dataColumns: ITableColumn[];\n    public displayedColumns: string[] = [];\n    public dataSource: any;\n    public sortOptionData: ISortOption = null;\n    private suboperationsData: any = null;\n    private isSub = false;\n    public buttonOptionsData: IButtonOptions[] = null;\n    public paginatorOptionData: IPaginatorOptions = null;\n    public trashOption;\n    public multiCheck;\n    // Button controls\n    public showNewButton = false;\n    public showMultiCheckButton: boolean;\n    public multiCheckArray = [];\n    public multiCheckArrayData = [];\n    public multiCheckId: string;\n    public dataSourceConnect: Subscription;\n    public multiNameToCheck;\n    public multiNameValue;\n    public decimalNum = 2;\n    public sharesNum = 0;\n    public suboperationsGeneratedData = [];\n    public showSuboperationsGeneratedData = [];\n    public multiMinSelected: any = -1;\n    public showMulticheck = [];\n    public conditionalMulticheck;\n    public keysMulticheck;\n    public valueMulticheckToCompare;\n\n    constructor(\n        public tableUtils: TableUtils,\n        public datePipe: DatePipe) {\n    }\n\n    @Input('classMap')\n    public set classMap(classMap: any) {\n        classMap.map((item: any) => {\n            this.classList += `${item} `;\n        });\n    }\n\n    @Input('dataSource')\n    public set dataSourceMap(dataSource: any) {\n        this.dataSource = dataSource;\n    }\n\n    @Input('dataColumnsTable')\n    public set columns(columns: ITableColumn[]) {\n        this.isSub = this.isSuboperation(columns);\n        this.dataColumns = columns;\n        this.displayedColumns = this.generateDisplay(columns);\n    }\n\n    @Input('sortOptions')\n    public set sortOptions(value: ISortOption) {\n        this.sort = new MatSort();\n        this.sortOptionData = {\n            activeSort: value.activeSort || this.dataColumns[0].name,\n            direction: value.direction || 'asc'\n        };\n    }\n\n    @Input('paginatorOption')\n    public set paginatorOption(value: IPaginatorOptions) {\n        this.paginatorOptionData = {\n            resultsLength: value.resultsLength || 0,\n            limit: value.limit ? value.limit : 20\n        };\n    }\n\n    @Input('buttonOptions')\n    public set buttonOptions(value: IButtonOptions[]) {\n        this.buttonOptionsData = value;\n    }\n\n    generateDisplay(data: ITableColumn[]) {\n        const array = [];\n        data.forEach((item: { name: string; }) => {\n            array.push(item.name);\n        });\n        return array;\n    }\n    // tslint:disable-next-line:cognitive-complexity\n    isSuboperation(columns) {\n        if (columns && columns[0].name === 'btnSuboperations') {\n            if (columns[0].suboperationData) {\n                this.suboperationsData = columns[0].suboperationData;\n            }\n            if (columns[0].trashOption) {\n                this.trashOption = true;\n            }\n            if (columns[0].multiCheck) {\n                this.multiCheck = columns[0].multiCheck;\n                this.multiCheckId = columns[0].multiCheck.id;\n                this.multiNameToCheck = columns[0].multiCheck && columns[0].multiCheck.multiNameToCheck ?\n                    columns[0].multiCheck.multiNameToCheck : null;\n                this.multiNameValue = columns[0].multiCheck && columns[0].multiCheck.multiNameValue ?\n                    columns[0].multiCheck.multiNameValue : null;\n                this.multiMinSelected = columns[0].multiCheck && columns[0].multiCheck.multiMinSelected ?\n                    columns[0].multiCheck.multiMinSelected : 0;\n                this.conditionalMulticheck = columns[0].multiCheck && columns[0].multiCheck.conditionalMulticheck ?\n                    columns[0].multiCheck.conditionalMulticheck : 0;\n                this.keysMulticheck = columns[0].multiCheck && columns[0].multiCheck.keysMulticheck ?\n                    columns[0].multiCheck.keysMulticheck : 0;\n                this.valueMulticheckToCompare = columns[0].multiCheck && columns[0].multiCheck.valueMulticheckToCompare ?\n                    columns[0].multiCheck.valueMulticheckToCompare : 0;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    ngOnInit() { }\n\n    matSortChange($event) {\n        this.sortChange.emit($event);\n    }\n\n    pageEvent(event) {\n        this.multiCheckArray = [];\n        this.onPageEvent.emit(event);\n    }\n\n    onMultiCheckAction() {\n        this.multiCheckAction.emit(this.multiCheckArrayData);\n        this.multiCheckArrayData = [];\n        this.multiCheckArray = [];\n    }\n\n    suboperationClicked(action, row) {\n        const data = {\n            action: action,\n            row: row\n        };\n        this.suboperationAction.emit(data);\n    }\n\n    trashOptionAction(row) {\n        this.trashAction.emit(row);\n    }\n    checkSort(sort) {\n        if (sort) {\n            return sort;\n        } else {\n            this.sort = new MatSort();\n            this.sort.direction = 'asc';\n            this.sort.active = this.sortOptionData.activeSort;\n            return this.sort;\n        }\n    }\n\n    public getObjectToCompare(elem, item) {\n        for (let i = 0; i < item.objectToCompare.length; i++) {\n            if (item.objectToCompare[i].id === elem[item.name]) {\n                return this.parseToDecimal(item.objectToCompare[i].label, item);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this.sortChange.emit(this.checkSort(this.sort));\n        this.onPageEvent.emit(this.paginator);\n        if (this.dataSource.connect) {\n            this.dataSourceConnect = this.dataSource.connect().subscribe((data) => {\n                if (this.suboperationsData) {\n                    this.showSuboperationData(data);\n                }\n                if (data && this.multiCheck) {\n                    this.showMultiCheckButton = true;\n                    this.multiCheckArray = this.tableUtils.chargeMultiCheckArray(this.dataSource.data,\n                        this.multiCheckArrayData, this.multiCheck.id);\n                    if (data.length > 0) {\n                        this.showMulticheck = this.tableUtils.chargeShowMulticheck(this.conditionalMulticheck,\n                            this.keysMulticheck, this.valueMulticheckToCompare, this.dataSource.data);\n                    }\n                }\n            });\n        }\n\n    }\n\n    onRowClick(row, index, event) {\n        if (this.multiCheck && event && event.target && event.target.getElementsByTagName('mat-checkbox') &&\n            event.target.getElementsByTagName('mat-checkbox').length > 0) {\n            if (this.multiCheckArray[index]) {\n                this.multiCheckArray[index] = false;\n                this.tableUtils.deleteInstance(this.multiCheckArrayData, row[this.multiCheckId]);\n            } else {\n                this.multiCheckArray[index] = true;\n                this.multiCheckArrayData.push(row[this.multiCheckId]);\n            }\n        } else {\n            this.rowClick.emit(row);\n        }\n    }\n\n    getInstaceName(elem, item) {\n        let valueToShow = '';\n        if (item.objectInstances) {\n            for (let i = 0; i < item.objectInstances.length; i++) {\n                if (elem[item.objectInstances[i]]) {\n                    valueToShow = elem[item.objectInstances[i]];\n                    elem = valueToShow;\n                }\n            }\n            return this.parseToDecimal(valueToShow, item);\n        } else {\n            if (item.date) {\n                return this.datePipe.transform(elem[item.name], 'dd/MM/yyyy');\n            }\n\n            return this.parseToDecimal(elem[item.name], item);\n        }\n    }\n\n    parseToDecimal(value, item) {\n        if (item.isShares) {\n            return this.tableUtils.transformToNumber(value, this.sharesNum);\n        }\n        if (item.isCurrency) {\n            return this.tableUtils.transformToNumber(value, this.decimalNum);\n        }\n        return value;\n    }\n\n    // tslint:disable-next-line:cognitive-complexity\n    public showSuboperationData(data) {\n        if (Array.isArray(data) && data.length > 0) {\n            data.forEach((item, index) => {\n                this.suboperationsGeneratedData[index] = this.tableUtils.copyArray(this.suboperationsData);\n                this.checkConditionalOptions(index, item);\n                this.showSuboperationsGeneratedData[index] = this.suboperationsGeneratedData[index].length > 0 ? true : false;\n            });\n        }\n    }\n\n    // tslint:disable-next-line:cognitive-complexity\n    public checkConditionalOptions(index, item) {\n        this.suboperationsGeneratedData[index].forEach((instance, i) => {\n            if (instance.conditional && instance.valueToCompare && instance.itemToCompare) {\n                if (typeof instance.conditional === 'string') {\n                    if (!this.tableUtils.suboperationConditional(instance.conditional, instance.valueToCompare,\n                        item[instance.itemToCompare])) {\n                        return this.spliceSuboperation(index, i, item);\n                    }\n                } else {\n                    instance.conditional.forEach((elem, j) => {\n                        if (!this.tableUtils.suboperationConditional(elem, instance.valueToCompare[j], item[instance.itemToCompare[j]])) {\n                            return this.spliceSuboperation(index, i, item);\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    public getButtonCondition(item) {\n        if (item.buttonConditions) {\n            if (item.buttonConditions.value && item.buttonConditions.condition\n                && item.buttonConditions.value === item.buttonConditions.condition) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    private spliceSuboperation(index: any, i: number, item: any) {\n        this.suboperationsGeneratedData[index].splice(i, 1);\n        return this.checkConditionalOptions(index, item);\n    }\n\n    public isMulticheckDisabled() {\n        if (this.disabledMulticheck) {\n            return true;\n        } else {\n            const minSelected = this.multiMinSelected && typeof this.multiMinSelected === 'string'\n                ? parseFloat(this.multiMinSelected) : this.multiMinSelected;\n            return this.multiCheckArrayData.length <= minSelected;\n        }\n    }\n    ngOnDestroy(): void {\n        if (this.dataSourceConnect) {\n            this.dataSourceConnect.unsubscribe();\n            this.dataSource.disconnect();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {\n    MatTableModule, MatSortModule, MatButtonModule, MatMenuModule, MatIconModule,\n    MatPaginatorModule, MatCheckboxModule, MatCardModule, MatSidenavModule\n} from '@angular/material';\n\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { NgxSpanishPipeModule } from 'ngx-spanish-pipe';\nimport { TableUtils } from './utils';\nimport { TableGeneratorComponent } from './ngx-table-generator.component';\n\n@NgModule({\n    declarations: [\n        TableGeneratorComponent\n    ],\n    imports: [\n        CommonModule,\n        MatTableModule,\n        MatIconModule,\n        MatMenuModule,\n        MatButtonModule,\n        MatSortModule,\n        MatPaginatorModule,\n        MatCheckboxModule,\n        MatCardModule,\n        MatSidenavModule,\n        NgxSpanishPipeModule\n    ],\n    exports: [\n        TableGeneratorComponent\n    ],\n    providers: [\n        TableUtils,\n        DatePipe\n    ],\n})\nexport class TableGeneratorModule { }\n"]}