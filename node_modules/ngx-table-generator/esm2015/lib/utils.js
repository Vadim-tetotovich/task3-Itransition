/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TableUtils {
    /**
     * @param {?} array
     * @param {?} value
     * @return {?}
     */
    deleteInstance(array, value) {
        for (let i = 0; i < array.length; i++) {
            if (value === array[i]) {
                array.splice(i, 1);
                break;
            }
        }
        return array;
    }
    /**
     * @param {?} data
     * @param {?} arrayData
     * @param {?} id
     * @return {?}
     */
    chargeMultiCheckArray(data, arrayData, id) {
        /** @type {?} */
        const array = [];
        for (let i = 0; i < data.length; i++) {
            arrayData.map((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item === data[i][id]) {
                    array[i] = true;
                }
            }));
        }
        return array;
    }
    /**
     * @param {?} val
     * @param {?} decimals
     * @return {?}
     */
    transformToNumber(val, decimals) {
        if (val !== undefined && val !== null) {
            decimals = decimals || decimals === 0 ? decimals : 2;
            if (isNaN(val)) {
                return val;
            }
            else {
                val = val.toLocaleString('es-ES', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
                if (val.includes(',')) {
                    val = this.covertMillarWithDecimalToSpanish(val);
                }
                else {
                    val = this.convertMillarToSpanish(val);
                }
                return val;
            }
        }
        else {
            return '';
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertMillarToSpanish(val) {
        /** @type {?} */
        const splitVal = val.split('');
        if (splitVal.length === 4) {
            splitVal.splice(1, 0, '.');
        }
        val = '';
        splitVal.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            val += element;
        }));
        return val;
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    covertMillarWithDecimalToSpanish(val) {
        /** @type {?} */
        const splitVal = val.split(',');
        if (splitVal[0].length === 4) {
            /** @type {?} */
            let naturalNum = splitVal[0];
            splitVal[0] = '';
            naturalNum = naturalNum.split('');
            naturalNum.splice(1, 0, '.');
            naturalNum.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                splitVal[0] += element;
            }));
            val = `${splitVal[0]},${splitVal[1]}`;
        }
        return val;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    copyArray(item) {
        /** @type {?} */
        let result = null;
        if (!item) {
            return result;
        }
        if (Array.isArray(item)) {
            result = [];
            item.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                result.push(this.copyArray(element));
            }));
        }
        else if (item instanceof Object && !(item instanceof Function)) {
            result = {};
            for (const key in item) {
                if (key) {
                    result[key] = this.copyArray(item[key]);
                }
            }
        }
        return result || item;
    }
    /**
     * @param {?} conditionalMulticheck
     * @param {?} keysMulticheck
     * @param {?} valueMulticheckToCompare
     * @param {?} data
     * @return {?}
     */
    chargeShowMulticheck(conditionalMulticheck, keysMulticheck, valueMulticheckToCompare, data) {
        /** @type {?} */
        const showArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            showArray[index] = true;
        }));
        if (conditionalMulticheck && keysMulticheck && valueMulticheckToCompare) {
            for (let i = 0; i < keysMulticheck.length; i++) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                (element, index) => {
                    if (!this.suboperationConditional(conditionalMulticheck[i], valueMulticheckToCompare[i], element[keysMulticheck[i]])
                        && showArray[index]) {
                        showArray[index] = false;
                    }
                }));
            }
        }
        return showArray;
    }
    /**
     * @param {?} conditional
     * @param {?} valueToCompare
     * @param {?} value
     * @return {?}
     */
    suboperationConditional(conditional, valueToCompare, value) {
        switch (conditional) {
            case '<':
                return parseFloat(value) < parseFloat(valueToCompare);
            case '>':
                return parseFloat(value) > parseFloat(valueToCompare);
            case '===':
                return (value || value === 0 || value === false ? value.toString() : value) ===
                    (valueToCompare || valueToCompare === 0 || valueToCompare === false ? valueToCompare.toString() : valueToCompare);
            case '>=':
                return value >= valueToCompare;
            case '<=':
                return value <= valueToCompare;
            case '<day':
                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) < 0;
            case '>day':
                return (new Date(value).setHours(0) - new Date().setHours(0, 0, 0, 0)) > 0;
        }
    }
}
TableUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ TableUtils.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TableUtils_Factory() { return new TableUtils(); }, token: TableUtils, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,